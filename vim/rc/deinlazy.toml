[[plugins]]
repo = 'Shougo/vimfiler.vim'
if = "!has('nvim')"
# "depends = 'unite.vim'   this prevents setting filetype, unite.vim can not be set as depends?
on_map = [['n', '<Plug>']]
on_path = '.*'
hook_add = 'noremap <silent> <Leader>f :VimFilerBufferDir -split -simple -winwidth=40 -no-quit<CR>'
hook_source = 'let vimfiler_as_default_explorer = 1'

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew','MemoList','MemoGrep']
hook_add = '''
  nnoremap <Leader>mn  :MemoNew<CR>
  nnoremap <Leader>ml  :MemoList<CR>
  nnoremap <Leader>mg  :MemoGrep<CR>
'''
hook_source = '''
  let g:memolist_denite = 1
  let g:memolist_path = expand('~/.memo')
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff']

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Git']
on_event = ['FocusLost', 'CursorHold']
hook_post_source = 'doautoall fugitive BufNewFile'

[[plugins]]
repo = 'joonty/vdebug'
on_ft = 'php'
hook_source = '''
  let g:vdebug_options = {
  \   'path_maps': { '/synced_folders/rpg-server': '/usr/local/funzio/cc-server' }
  \ , 'ide_key': ''
  \}
'''

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = 'php'
hook_source = '''
  let g:php_cs_fixer_rules = '@PSR2'
  let g:php_cs_fixer_path = '/usr/local/bin/php-cs-fixer'
  nnoremap <silent> <Leader>fix :call PhpCsFixerFixFile()<CR>
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = '''
  let g:switch_mapping = ''
  " switch single quoto to double
  let g:switch_custom_definitions = [
  \   {
  \       "'\(\k\+\)'": '"\1"',
  \       '"\(\k\+\)"': "'\1'",
  \   },
  \]
  " switch snake case to camel case
  let g:variable_style_switch_definitions = [
  \   {
  \     '\<[a-z0-9]\+_\k\+\>': {
  \       '_\(.\)': '\U\1'
  \     },
  \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
  \       '\([A-Z]\)': '_\l\1'
  \     },
  \   }
  \]
  nnoremap [switch.vim] <Nop>
  nmap <Leader>sw [switch.vim]
  nnoremap <silent> [switch.vim] :Switch<CR>
  nnoremap <silent> [switch.vim]w :call switch#Switch({'definitions': g:variable_style_switch_definitions})<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
on_map = ['<C-w>>', '<C-w><', '<C-w>+', '<C-w>-']
hook_source = '''
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = [['n', '<Plug>']]
hook_add = 'nmap  <Leader>w  <Plug>(choosewin)'
hook_source = '''
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1
  let g:choosewin_color_overlay = {
        \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
        \ 'cterm': [ 25, 25 ]
        \ }
  let g:choosewin_color_overlay_current = {
        \ 'gui': ['firebrick1', 'firebrick1' ],
        \ 'cterm': [ 124, 124 ]
        \ }
  let g:choosewin_blink_on_land      = 0
  let g:choosewin_statusline_replace = 0
  let g:choosewin_tabline_replace    = 0
'''

[[plugins]]
repo = 'vim-scripts/yanktmp.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
  nnoremap <silent> <Leader>ty :call YanktmpYank()<CR>
  nnoremap <silent> <Leader>tp :call YanktmpPaste_p()<CR>
  nnoremap <silent> <Leader>tP :call YanktmpPaste_P()<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign'
hook_add = '''
  xmap <Enter> <Plug>(EasyAlign)
  nmap <Leader>a <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = ['Ag', 'AgFile']

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_map = [['n', '<Leader>p']]
hook_add = '''
  let g:ctrlp_map = '<Leader>p'
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = [['n', '<Plug>']]
hook_add = '''
nmap <silent> <Leader>rr :cclose<CR>:write<CR><Plug>(quickrun)<CR>
nmap <silent> <Leader>rt :cclose<CR>:write<CR>:QuickRun -runner terminal<CR>
nmap <silent> <Leader>ri :cclose<CR>:write<CR>:QuickRun -input input.txt -runner system<CR>
nmap <silent> <Leader>re :cclose<CR>:write<CR>:QuickRun -input input.txt -runner system -command 'clang++' -cmdopt '-std=c++17 -stdlib=libc++ -Wall -O2 -D_DEBUG'<CR>
'''
hook_source = '''
   const s:runner = has('nvim') ? "system" : "vimproc"
   let g:quickrun_config = {
   \   '_': {
   \     'input': '=%{b:input}', 'cmdopt': '%{b:cmdopt}', 'args': '%{b:args}',
   \     'runner': s:runner,
   \     'runner/vimproc/updatetime': 50,
   \     'outputter' : 'error',
   \     'outputter/buffer/opener' : 'new',
   \     'outputter/buffer/close_on_empty' : 1,
   \     'outputter/buffer/running_mark' : 'running...',
   \     'outputter/error/success' : 'buffer',
   \     'outputter/error/error'   : 'quickfix',
   \     'hook/time/enable': 1,
   \   },
   \   'haskell': {
   \     'command': 'runghc',
   \   },
   \   'python.pytest': {
   \     'command': 'pytest',
   \     'cmdopt': '-s -v',
   \     'outputter/error/error': 'buffer',
   \   },
   \   'cpp': {
   \     'command': 'clang++',
   \     'cmdopt': '-std=c++17 -stdlib=libc++ -Wall -O2',
   \   },
   \}
   " \     'command': 'g++-11',
   " \     'cmdopt': '-std=gnu++17 -Wall -Wextra -O2',
'''

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']
on_event = ['FocusLost', 'CursorHold']
hook_source = 'let g:haskell_conceal = 0'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
  let g:haskellmode_completion_ghc = 0
  let g:necoghc_enable_detailed_browse = 1
  autocmd myvimrc FileType haskell setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']
on_event = ['FocusLost', 'CursorHold']
hook_source = '''
  noremap <silent> <Leader>ghi :GhcModTypeInsert<CR>
  noremap <silent> <Leader>ghs :GhcModSplitFunCase<CR>
  noremap <silent> <Leader>ght :GhcModType<CR>
  noremap <silent> <Leader>ghc :GhcModTypeClear<CR>
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'ujihisa/ref-hoogle'
on_ft = ['haskell']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['js']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['js']
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'mattn/webapi-vim'
on_ft = ['markdown']

[[plugins]]
repo = 'moznion/hateblo.vim'
depends = ['webapi-vim']
on_ft = ['markdown']

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = ['PrevimOpen']
on_ft = ['markdown']
hook_add = '''
  let g:previm_open_cmd = 'open -a Firefox'
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
depends = 'neosnippet-snippets'
hook_source = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'tpope/vim-speeddating'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp']

[[plugins]]
repo = 'osyo-manga/vim-reunions'
on_source = ['vim-marching']

[[plugins]]
repo = 'vim-scripts/dbext.vim'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'Shougo/defx.nvim'
if = "has('nvim')"
hook_add = '''
nnoremap <silent>   <Leader>f
\ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''
[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#async_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> o
\ defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O
\ defx#async_action('open_tree_recursive')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> se
\ defx#do_action('add_session')
nnoremap <silent><buffer><expr> sl
\ defx#do_action('load_session')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> >
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> .
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> h
\ defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#async_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
xnoremap <silent><buffer><expr> <CR>
\ defx#do_action('toggle_select_visual')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
\ ':<C-u>wincmd w<CR>' :
\ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''


[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = 'denops.vim'
hook_source = '''
  call ddc#custom#patch_global('ui', 'pum')
  call ddc#custom#patch_global('sources', ['vim-lsp', 'buffer', 'file', 'vsnip'])
  call ddc#custom#patch_global('sourceOptions', #{
        \ buffer: #{
        \   mark: '[B]',
        \ },
        \ file: #{
        \   mark: '[F]',
        \   forceCompletionPattern: '\S/\S*',
        \ },
        \ vim-lsp: #{
        \   mark: '[lsp]',
        \   forceCompletionPattern: '\.\w*|:\w*|->\w*',
        \   minAutoCompleteLength: 1,
        \ },
        \ vsnip: #{
        \   mark: '[snip]',
        \ },
        \ _: #{
        \   matchers: ['matcher_fuzzy'],
        \   sorters: ['sorter_fuzzy']},
        \ })
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <silent><expr> <C-n>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ ddc#map#manual_complete()
  inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'
on_source = ['ddc.vim', 'vim-lsp']

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = ['ddc.vim', 'vim-vsnip']

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = 'denops.vim'
hook_add =  '''
  nnoremap [ddu] <Nop>
  nmap <Leader>d [ddu]
  nnoremap <silent> [ddu]p <Cmd>call ddu#start(#{name: 'file_rec'})<CR>
  nnoremap <silent> [ddu]r <Cmd>call ddu#start(#{sources: [#{name: 'register'}]})<CR>
  nnoremap <silent> [ddu]b <Cmd>call ddu#start(#{sources: [#{name: 'buffer'}]})<CR>
  nnoremap <silent> [ddu]h <Cmd>call ddu#start(#{sources: [#{name: 'help'}]})<CR>
'''
hook_source = '''
  call ddu#custom#patch_global(#{
      \   ui: 'ff',
      \   uiParams: #{
      \     ff: #{
      \       prompt: '> ',
      \     },
      \   },
      \   sourceOptions: #{
      \     _: #{
      \       matchers: ['matcher_substring'],
      \     },
      \   },
      \   kindOptions: #{
      \     file: #{
      \       defaultAction: 'open',
      \     },
      \     help: #{
      \       defaultAction: 'open',
      \     },
      \   },
      \   filterParams: #{
      \     matcher_substring: #{
      \       highlightMatched: 'Search',
      \     },
      \   },
      \ })
  call ddu#custom#patch_local('file_rec', #{
      \   sources: [#{
      \     name: 'file_rec',
      \     params: #{
      \       ignoredDirectories: ['.git', '.mypy_cache'],
      \     },
      \   }],
      \   uiParams: #{
      \     ff: #{
      \       prompt: '> ',
      \       startFilter: v:true,
      \     },
      \   },
      \ })
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
hook_add = '''
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer> <CR>
	  \ <Esc><Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> <CR>
	  \ <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
  nnoremap <buffer> q
	  \ <Cmd>call ddu#ui#do_action('closeFilterWindow')<CR>
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
depends = 'ddu-kind-word'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'
