[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_cmd = ['Unite']
hook_source = '''
  " let g:unite_source_grep_max_candidates = 200
  let g:unite_enable_start_insert = 0
  let g:unite_source_bookmark_directory = expand('~/.unite/bookmark')
 
  " call unite#custom_default_action('source/bookmark/directory' , 'vimfiler')
 
  autocmd myvimrc FileType unite imap <silent><buffer> <C-f> <Plug>(unite_insert_leave)
 
  if executable('ag')
      " Use ag in unite grep source.
      let g:unite_source_grep_command = 'ag'
      let g:unite_source_grep_recursive_opt = ''
      let g:unite_source_grep_default_opts =
      \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
      \  ' ''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' '
  endif
'''
hook_add = '''
  nnoremap [unite] <Nop>
  nmap <Leader>u [unite]
  nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
  nnoremap <silent> [unite]c :<C-u>Unite<Space>bookmark<CR>
  nnoremap <silent> [unite]y :<C-u>Unite<Space>history/yank<CR>
  nnoremap <silent> [unite]f :<C-u>Unite<Space>file<CR>
  nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
  nnoremap <silent> [unite]a :<C-u>Unite buffer file file_mru bookmark<CR>
  nnoremap <silent> [unite]R :<C-u>Unite<Space>register<CR>
  nnoremap <silent> [unite]r :<C-u>UniteResume search-buffer<CR>
  nnoremap <silent> [unite]g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = [['n', '<Plug>']]
on_path = '.*'
hook_add = 'noremap <silent> <Leader>f :VimFilerBufferDir -split -simple -winwidth=40 -no-quit<CR>'
hook_source = 'let vimfiler_as_default_explorer = 1'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
  nnoremap <silent> <Leader>s :VimShellBufferDir<CR>
  nnoremap <silent> <Leader>sh :VimShellInteractive ghci<CR>
  nnoremap <silent> <Leader>ss <S-v>:VimShellSendString<CR>
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew','MemoList','MemoGrep']
hook_add = '''
  nnoremap <Leader>mn  :MemoNew<CR>
  nnoremap <Leader>ml  :MemoList<CR>
  nnoremap <Leader>mg  :MemoGrep<CR>
'''
hook_source = '''
  let g:memolist_vimfiler = 1
  let g:memolist_path = expand('~/.memo')
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff']

[[plugins]]
repo = 'tpope/vim-fugitive'
on_idle = 1
hook_post_source = 'doautoall fugitive BufNewFile'

[[plugins]]
repo = 'joonty/vdebug'
on_ft = 'php'
hook_source = '''
  let g:vdebug_options = {
  \   'path_maps': { '/synced_folders/rpg-server': '/usr/local/funzio/cc-server' }
  \ , 'ide_key': ''
  \}
'''

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = 'php'
if = 0
#hook_source = 'let g:php_cs_fixer_path = s:fixer'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = '''
  let g:switch_mapping = ''
  " switch single quoto to double
  let g:switch_custom_definitions = [
  \   {
  \       "'\(\k\+\)'": '"\1"',
  \       '"\(\k\+\)"': "'\1'",
  \   },
  \]
  " switch snake case to camel case
  let g:variable_style_switch_definitions = [
  \   {
  \     '\<[a-z0-9]\+_\k\+\>': {
  \       '_\(.\)': '\U\1'
  \     },
  \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
  \       '\([A-Z]\)': '_\l\1'
  \     },
  \   }
  \]
  nnoremap [switch.vim] <Nop>
  nmap <Leader>sw [switch.vim]
  nnoremap <silent> [switch.vim] :Switch<CR>
  nnoremap <silent> [switch.vim]w :call switch#Switch(g:variable_style_switch_definitions)<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
on_map = ['<C-w>>', '<C-w><', '<C-w>+', '<C-w>-']
hook_source = '''
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = [['n', '<Plug>']]
hook_add = 'nmap  <Leader>w  <Plug>(choosewin)'
hook_source = '''
  let g:choosewin_overlay_enable = 1
  let g:choosewin_overlay_clear_multibyte = 1
  let g:choosewin_color_overlay = {
        \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
        \ 'cterm': [ 25, 25 ]
        \ }
  let g:choosewin_color_overlay_current = {
        \ 'gui': ['firebrick1', 'firebrick1' ],
        \ 'cterm': [ 124, 124 ]
        \ }
  let g:choosewin_blink_on_land      = 0
  let g:choosewin_statusline_replace = 0
  let g:choosewin_tabline_replace    = 0
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_cmd = ['scala']
hook_source = 'autocmd myvimrc BufNewFile,BufRead *.scala setf scala'

[[plugins]]
repo = 'vim-scripts/yanktmp.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
  nnoremap <silent> <Leader>ty :call YanktmpYank()<CR>
  nnoremap <silent> <Leader>tp :call YanktmpPaste_p()<CR>
  nnoremap <silent> <Leader>tP :call YanktmpPaste_P()<CR>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign'
hook_add = '''
  xmap <Enter> <Plug>(EasyAlign)
  nmap <Leader>a <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = ['Ag', 'AgFile']

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
on_map = [['n', '<Leader>p']]
hook_add = '''
  let g:ctrlp_map = '<Leader>p'
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = [['n', '<Plug>']]
hook_add = 'nmap <silent> <Leader>rr <Plug>(quickrun)'
hook_source = '''
   let g:quickrun_config = {
   \   '_': {
   \     'debug': 'ss',
   \     'input': '=%{b:input}', 'cmdopt': '%{b:cmdopt}', 'args': '%{b:args}',
   \     'runner': 'vimproc',
   \     'runner/vimproc/updatetime': 50,
   \     'outputter/buffer/close_on_empty' : 1,
   \   },
   \   'haskell': {
   \       'command': 'runghc',
   \   },
   \}
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_idle = 1
if = 0
hook_add = '''
  let g:precious_enable_switch_CursorMoved = {"*": 1}
'''

[[plugins]]
repo = 'dag/vim2hs'
on_ft = ['haskell']
on_idle = 1
hook_source = 'let g:haskell_conceal = 0'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']
on_idle = 1
hook_add = '''
  let g:haskellmode_completion_ghc = 0
  autocmd myvimrc FileType haskell setlocal omnifunc=necoghc#omnifunc
'''

[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']
on_idle = 1
hook_source = '''
  noremap <silent> <Leader>ghi :GhcModTypeInsert<CR>
  noremap <silent> <Leader>ghs :GhcModSplitFunCase<CR>
  noremap <silent> <Leader>ght :GhcModType<CR>
  noremap <silent> <Leader>ghc :GhcModTypeClear<CR>
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_ft = ['haskell']
on_idle = 1

[[plugins]]
repo = 'ujihisa/ref-hoogle'
on_ft = ['haskell']
on_idle = 1

[[plugins]]
repo = 'ujihisa/unite-haskellimport'
on_ft = ['haskell']
on_idle = 1
hook_add = 'nnoremap <buffer> <space>I :<C-u>UniteWithCursorWord haskellimport<Cr>'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['js']
on_idle = 1

[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['js']
on_idle = 1

[[plugins]]
repo = 'mattn/webapi-vim'
on_source = ['hateblo.vim']
on_ft = ['markdown']

[[plugins]]
repo = 'moznion/hateblo.vim'
depends = ['webapi-vim']
on_cmd = ['HatebloCreate', 'HatebloCreateDraft', 'HatebloList', 'HatebloUpdate', 'HatebloDelete']
on_ft = ['markdown']

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = ['PrevimOpen']
on_ft = ['markdown']
hook_add = '''
  let g:previm_open_cmd = 'open -a Firefox'
'''









