let mapleader=" "

set rtp+=/usr/local/Cellar/go/1.3/libexec/misc/vim

" vi compatibility
if !&compatible
  set nocompatible
endif

augroup myvimrc
    autocmd!
augroup END

" {{{ dein
" Prepare .vim dir
let s:vimdir = expand("~/.vim")
if has("vim_starting")
  if ! isdirectory(s:vimdir)
    call system("mkdir " . s:vimdir)
  endif
endif

let s:dein_dir = s:vimdir . '/dein'

if &runtimepath !~# '/dein.vim'
  let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  call dein#load_toml('~/.vim/rc/dein.toml', {'lazy': 0})
  call dein#load_toml('~/.vim/rc/deinlazy.toml', {'lazy': 1})

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

if !has('vim_starting')
  call dein#call_hook('source')
  call dein#call_hook('post_source')
endif

augroup myvimrc
  autocmd BufRead,BufNewFile dein.toml set filetype=vim
  autocmd BufRead,BufNewFile deinlazy.toml set filetype=vim
augroup END
 " }}}

:source $VIMRUNTIME/macros/matchit.vim

filetype plugin indent on
syntax on


set termencoding=utf-8
" set fileencodings=iso-2021-jp-3,iso-2022-jp,euc-jisx0213,euc-jp,utf-8,ucs-bom,euc-jp,eucjp-ms,cp932
set title
set smartindent
"set backupdir=~/.vim/vimbackup
"set directory=~/.vim/vimbackup
set expandtab
set number
set smartcase
set smarttab
set wildignore=*.zip
set wildmode=longest,list,full
set wildmenu
set completeopt+=longest
set completeopt-=preview
set nobackup
set noswapfile
set lazyredraw
set laststatus=2
set statusline=%=[%{&enc}/%{&fenc}][%<%F\%m%w]
set showmatch
set hlsearch
set foldmethod=marker
set pastetoggle=<Leader>P
set shiftwidth=4
set tabstop=4
set tags=.git/tags,.tags,./tags,tags
set display=lastline
set pumheight=5
set virtualedit+=block
set timeoutlen=300
set ttimeoutlen=50
set mouse=

" 対応するカッコの表示をしない
let loaded_matchparen = 1

highlight CursorColumn term=reverse cterm=reverse

augroup myvimrc
  autocmd BufNewFile $HOME/gws/contest/**/*.cpp :0r ~/.vim/templates/atcoder.cpp
  "autocmd BufNewFile *.tpl %substitute#__DATE__#\=strftime('%Y-%m-%d')#ge
  " autocmd BufWritePre * %s/\s\+$//e
augroup END

" {{{  go
autocmd myvimrc BufRead,BufNewFile *.go set noexpandtab
autocmd myvimrc BufWritePre *.go Fmt
let g:gofmt_command = 'goimports'
set rtp+=${GOROOT}/misc/vim
set rtp^=${GOPATH}/src/github.com/nsf/gocode/vim
" }}}
" {{{ key mappings
inoremap <C-f> <Esc>

nnoremap Y y$

function! HighlightCursor()
    set cursorline
    set cursorcolumn
    redraw
    sleep 50ms
    set nocursorcolumn
    set nocursorline
    redraw
endfunction
nnoremap <silent> <C-l> :noh<CR>:call HighlightCursor()<CR>

nnoremap <silent> ]a :next<CR>
nnoremap <silent> [a :previous<CR>
nnoremap <silent> ]t :tabnext<CR>
nnoremap <silent> [t :tabprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]c :cnext<CR>
nnoremap <silent> [c :cprevious<CR>

nnoremap <silent> <C-w>d :bdelete %<CR>

nnoremap <F6> :<C-u>source $MYVIMRC<CR>
nnoremap vim :<C-u>edit $MYVIMRC<CR>

" move view point to center when search words
nnoremap n nzz
nnoremap N Nzz

nnoremap <silent> <Leader>h :GhcModCheckAndLintAsync<CR>

" search selected strings in visual mode
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
    let tmp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
    let @s = tmp
endfunction

nnoremap <silent> <Leader>nn :<C-u>call <SID>goCounterpart()<CR>
function! s:goCounterpart()
    let l:path = expand('%:p')
    let l:ext = expand('%:e')
    if ext == 'cpp'
      execute 'edit ' . substitute(l:path, '\.cpp', '\.h', '')
    elseif ext == 'h'
      execute 'edit ' . substitute(l:path, '\.h', '\.cpp', '')
    endif
endfunction

cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" }}}

if has('nvim')
  execute 'source' fnamemodify(expand('<sfile>'), ':h').'/rc/nvimrc.vim'
endif

source $HOME/.vimrc.local

if has('gui_running')
    colorscheme solarized
    set guioptions=c
    set guifont=Monaco:h9
endif
